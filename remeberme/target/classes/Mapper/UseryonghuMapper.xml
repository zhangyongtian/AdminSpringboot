<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhang.biyeseji.remeberme.mapper.UseryonghuMapper">
  <cache type="com.zhang.biyeseji.remeberme.config.RedisCache"></cache>
  <resultMap id="BaseResultMap" type="com.zhang.biyeseji.remeberme.pojo.Useryonghu">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="userid" jdbcType="INTEGER" property="userid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="userpassword" jdbcType="VARCHAR" property="userpassword" />
    <result column="useremail" jdbcType="VARCHAR" property="useremail" />
    <result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="updatetime" jdbcType="TIMESTAMP" property="updatetime" />
    <result column="commentcount" jdbcType="INTEGER" property="commentcount" />
    <result column="userlevel" jdbcType="INTEGER" property="userlevel" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="userimage" jdbcType="VARCHAR" property="userimage" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userid, username, userpassword, useremail, createtime, updatetime, commentcount, 
    userlevel, salt, userimage
  </sql>
  <resultMap id="UseryonghuByname" type="com.zhang.biyeseji.remeberme.pojo.Useryonghu">
<!--    select useryonghu.id as userid ,useryonghu.username as username
,useryonghu.userpassword as userpassword,-->
<!--    useryonghu.userlevel as userlevel,useryonghu.userimage as
userimage,role.rolename as rolename from useryonghu-->
    <id property="id" column="userid"></id>
    <result property="username" column="username"></result>
    <result property="userid" column="uid"></result>
    <result property="userpassword" column="userpassword"></result>
    <result property="userlevel" column="userlevel"></result>
    <result property="userimage" column="userimage"></result>
    <result property="useremail" column="useremail"></result>
    <result property="createtime" column="usercreatetime"></result>
    <result property="updatetime" column="userupdatetime"></result>
    <result property="salt" column="salt"></result>
    <result property="commentcount" column="usercommentcount"></result>
    <collection property="roles" javaType="java.util.List" ofType="com.zhang.biyeseji.remeberme.pojo.Role">
      <result property="roleid" column="roleid"></result>
      <result property="rolename" column="rolename"></result>
    </collection>
  </resultMap>
  <select id="selectByExample" parameterType="com.zhang.biyeseji.remeberme.pojo.UseryonghuExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from useryonghu
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
<!--#################################################-->
<!--  这里是用户名查询用户还有用户拥有的角色-->
  <select id="selectUseryonghuByname" parameterType="java.lang.String" resultMap="UseryonghuByname">
        select useryonghu.updatetime as userupdatetime, useryonghu.createtime as usercreatetime , useryonghu.userid as uid,useryonghu.salt as salt, role.roleid as roleid , useryonghu.useremail as useremail,useryonghu.id as userid ,useryonghu.username as username,useryonghu.userpassword as userpassword,
        useryonghu.commentcount as usercommentcount,useryonghu.userlevel as userlevel,useryonghu.userimage as userimage,role.rolename as rolename from useryonghu
        left join user_role on user_role.userid=useryonghu.id
        left join role on user_role.roleid=role.roleid
        where useryonghu.username=#{username};
  </select>
  <!--#################################################-->
  <!--  这里是用户邮箱查询用户还有用户拥有的角色-->
  <select id="selectUseryonghuByEmail" parameterType="java.lang.String" resultMap="UseryonghuByname">
        select useryonghu.updatetime as userupdatetime, useryonghu.createtime as usercreatetime , useryonghu.userid as uid,useryonghu.salt as salt, role.roleid as roleid , useryonghu.useremail as useremail,useryonghu.id as userid ,useryonghu.username as username,useryonghu.userpassword as userpassword,
        useryonghu.commentcount as usercommentcount,useryonghu.userlevel as userlevel,useryonghu.userimage as userimage,role.rolename as rolename from useryonghu
        left join user_role on user_role.userid=useryonghu.id
        left join role on user_role.roleid=role.roleid
        where useryonghu.useremail=#{useremail};
  </select>

  <select id="selectUseryonghuAndRoleById" parameterType="java.lang.Integer" resultMap="UseryonghuByname">
    select useryonghu.updatetime as userupdatetime, useryonghu.createtime as usercreatetime , useryonghu.userid as uid,useryonghu.salt as salt, role.roleid as roleid , useryonghu.useremail as useremail,useryonghu.id as userid ,useryonghu.username as username,useryonghu.userpassword as userpassword,
        useryonghu.commentcount as usercommentcount,useryonghu.userlevel as userlevel,useryonghu.userimage as userimage,role.rolename as rolename from useryonghu
        left join user_role on user_role.userid=useryonghu.id
        left join role on user_role.roleid=role.roleid
        where useryonghu.id=#{id}
  </select>

  <select id="selectAllUseryonghuAndRole" resultMap="UseryonghuByname">
    select useryonghu.updatetime as userupdatetime, useryonghu.createtime as usercreatetime , useryonghu.userid as uid,useryonghu.salt as salt, role.roleid as roleid , useryonghu.useremail as useremail,useryonghu.id as userid ,useryonghu.username as username,useryonghu.userpassword as userpassword,
        useryonghu.commentcount as usercommentcount,useryonghu.userlevel as userlevel,useryonghu.userimage as userimage,role.rolename as rolename from useryonghu
        left join user_role on user_role.userid=useryonghu.id
        left join role on user_role.roleid=role.roleid
  </select>

<!--  查询所有的用户-->
  <select id="selectAllUseryonghu" resultType="com.zhang.biyeseji.remeberme.pojo.Useryonghu">
        select * from useryonghu
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from useryonghu
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from useryonghu
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zhang.biyeseji.remeberme.pojo.UseryonghuExample">
    delete from useryonghu
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zhang.biyeseji.remeberme.pojo.Useryonghu" useGeneratedKeys="true" keyProperty="id">
    insert into useryonghu (id, userid, username, 
      userpassword, useremail, createtime, 
      updatetime, commentcount, userlevel, 
      salt, userimage)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, 
      #{userpassword,jdbcType=VARCHAR}, #{useremail,jdbcType=VARCHAR}, #{createtime,jdbcType=TIMESTAMP}, 
      #{updatetime,jdbcType=TIMESTAMP}, #{commentcount,jdbcType=INTEGER}, #{userlevel,jdbcType=INTEGER}, 
      #{salt,jdbcType=VARCHAR}, #{userimage,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zhang.biyeseji.remeberme.pojo.Useryonghu">
    insert into useryonghu
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userid != null">
        userid,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="userpassword != null">
        userpassword,
      </if>
      <if test="useremail != null">
        useremail,
      </if>
      <if test="createtime != null">
        createtime,
      </if>
      <if test="updatetime != null">
        updatetime,
      </if>
      <if test="commentcount != null">
        commentcount,
      </if>
      <if test="userlevel != null">
        userlevel,
      </if>
      <if test="salt != null">
        salt,
      </if>
      <if test="userimage != null">
        userimage,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="userpassword != null">
        #{userpassword,jdbcType=VARCHAR},
      </if>
      <if test="useremail != null">
        #{useremail,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="commentcount != null">
        #{commentcount,jdbcType=INTEGER},
      </if>
      <if test="userlevel != null">
        #{userlevel,jdbcType=INTEGER},
      </if>
      <if test="salt != null">
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="userimage != null">
        #{userimage,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zhang.biyeseji.remeberme.pojo.UseryonghuExample" resultType="java.lang.Long">
    select count(*) from useryonghu
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update useryonghu
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null">
        userid = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.userpassword != null">
        userpassword = #{record.userpassword,jdbcType=VARCHAR},
      </if>
      <if test="record.useremail != null">
        useremail = #{record.useremail,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null">
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatetime != null">
        updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.commentcount != null">
        commentcount = #{record.commentcount,jdbcType=INTEGER},
      </if>
      <if test="record.userlevel != null">
        userlevel = #{record.userlevel,jdbcType=INTEGER},
      </if>
      <if test="record.salt != null">
        salt = #{record.salt,jdbcType=VARCHAR},
      </if>
      <if test="record.userimage != null">
        userimage = #{record.userimage,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update useryonghu
    set id = #{record.id,jdbcType=INTEGER},
      userid = #{record.userid,jdbcType=INTEGER},
      username = #{record.username,jdbcType=VARCHAR},
      userpassword = #{record.userpassword,jdbcType=VARCHAR},
      useremail = #{record.useremail,jdbcType=VARCHAR},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      commentcount = #{record.commentcount,jdbcType=INTEGER},
      userlevel = #{record.userlevel,jdbcType=INTEGER},
      salt = #{record.salt,jdbcType=VARCHAR},
      userimage = #{record.userimage,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zhang.biyeseji.remeberme.pojo.Useryonghu">
    update useryonghu
    <set>
      <if test="userid != null">
        userid = #{userid,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="userpassword != null">
        userpassword = #{userpassword,jdbcType=VARCHAR},
      </if>
      <if test="useremail != null">
        useremail = #{useremail,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="commentcount != null">
        commentcount = #{commentcount,jdbcType=INTEGER},
      </if>
      <if test="userlevel != null">
        userlevel = #{userlevel,jdbcType=INTEGER},
      </if>
      <if test="salt != null">
        salt = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="userimage != null">
        userimage = #{userimage,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zhang.biyeseji.remeberme.pojo.Useryonghu">
    update useryonghu
    set userid = #{userid,jdbcType=INTEGER},
      username = #{username,jdbcType=VARCHAR},
      userpassword = #{userpassword,jdbcType=VARCHAR},
      useremail = #{useremail,jdbcType=VARCHAR},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      commentcount = #{commentcount,jdbcType=INTEGER},
      userlevel = #{userlevel,jdbcType=INTEGER},
      salt = #{salt,jdbcType=VARCHAR},
      userimage = #{userimage,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>